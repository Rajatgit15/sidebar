{"version":3,"sources":["logo.svg","DrawerToggleButton.js","Toolbar.js","SideDrawer.js","Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","drawerToggleButton","props","className","onClick","click","toolbar","drawerClickHandler","href","sideDrawer","drawerClasses","show","backdrop","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","pervState","backdropClickHandler","this","style","height","marginTop","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAAAA,EAAOC,QAAU,IAA0B,kC,qICc5BC,G,YAVY,SAAAC,GAAK,OAE5B,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0BCeJG,EAnBC,SAAAJ,GAAK,OAEjB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,yBACX,kBAAC,EAAD,CAAoBE,MAAOH,EAAMK,sBAEjC,yBAAKJ,UAAU,gBAAe,uBAAGK,KAAM,KAAT,aAC9B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,4BACX,4BACI,4BAAI,uBAAGK,KAAM,KAAT,aACJ,4BAAI,uBAAGA,KAAM,KAAT,eCIjBC,G,MAjBK,SAAAP,GAEpB,IAAIQ,EAAe,cAKf,OAJDR,EAAMS,OACLD,EAAe,oBAIf,yBAAKP,UAAWO,GACZ,4BACI,4BAAI,uBAAGF,KAAM,KAAT,aACJ,4BAAI,uBAAGA,KAAM,KAAT,cCPDI,G,MALC,SAAAV,GAAK,OACjB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,UCwC9BQ,G,uNApCfC,MAAM,CACJC,gBAAgB,G,EAGlBC,yBAAyB,WACvB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAsB,WACpB,EAAKF,SAAS,CAACF,gBAAgB,K,wEAI7B,IAAIH,EAMN,OAJKQ,KAAKN,MAAMC,iBAEZH,EAAS,kBAAC,EAAD,CAAUP,MAAQe,KAAKD,wBAGlC,yBAAKE,MAAO,CAACC,OAAO,SAClB,kBAAC,EAAD,CAASf,mBAAqBa,KAAKJ,2BACnC,kBAAC,EAAD,CAAYL,KAAMS,KAAKN,MAAMC,iBAF/B,IAGEH,EAEA,0BAAMS,MAAO,CAACE,UAAW,SACvB,6D,GA7BUC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.25c09932.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './DrawerToggleButton.css';\r\n\r\n\r\nconst drawerToggleButton = props=>(\r\n\r\n    <button className=\"toggle-button\" onClick={props.click}>\r\n        <div className=\"toggle-button_line\"/>\r\n        <div className=\"toggle-button_line\"/>\r\n        <div className=\"toggle-button_line\"/>\r\n    </button>\r\n);\r\n\r\n\r\nexport default drawerToggleButton;","import React from 'react';\r\nimport './Toolbar.css';\r\nimport './DrawerToggleButton';\r\nimport DrawerToggleButton from './DrawerToggleButton';\r\n\r\n    const toolbar = props =>(\r\n\r\n        <header className=\"toolbar\">\r\n            <nav className=\"toolbar_navigation\">\r\n                <div className=\"toolbar_toggle-button\"> \r\n                    <DrawerToggleButton click={props.drawerClickHandler}/>\r\n                </div>\r\n                    <div className=\"toolbar_logo\"><a href =\"/\" >THE LOGO</a></div>\r\n                    <div className=\"spacer\"/>\r\n                    <div className=\"toolbar_navigation-items\">\r\n                        <ul>\r\n                            <li><a href =\"/\">Products</a></li>\r\n                            <li><a href =\"/\">Users</a></li>\r\n                        </ul>\r\n                    </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n\r\n    export default toolbar;","import React from 'react';\r\nimport './SideDrawer.css';\r\n\r\n\r\nconst sideDrawer =  props => {\r\n\r\nlet drawerClasses= 'side-drawer'\r\nif(props.show){\r\n    drawerClasses= 'side-drawer open'\r\n}\r\n\r\n    return(\r\n    <nav className={drawerClasses}> \r\n        <ul>\r\n            <li><a href =\"/\">Products</a></li>\r\n            <li><a href =\"/\">Users</a></li>\r\n\r\n            \r\n        </ul>\r\n    </nav>)\r\n}\r\nexport default sideDrawer;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop =props=>(\r\n    <div className=\"backdrop\" onClick={props.click}/>\r\n\r\n)\r\n\r\nexport default backdrop;","import React from 'react';\nimport Toolbar from './Toolbar';\nimport SideDrawer from './SideDrawer';\nimport Backdrop from './Backdrop';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\nstate={\n  sideDrawerOpen: false\n}\n\ndrawerToggleClickHandler=()=>{\n  this.setState((pervState)=>{\n    return {sideDrawerOpen: !pervState.sideDrawerOpen}\n  })\n}\n\nbackdropClickHandler =()=>{\n  this.setState({sideDrawerOpen: false})\n}\n  render(){\n   \n    let backdrop;\n\n    if(this.state.sideDrawerOpen){\n      \n      backdrop=<Backdrop click ={this.backdropClickHandler}/>\n    }\n  return (\n    <div style={{height:'100%'}}>\n      <Toolbar drawerClickHandler= {this.drawerToggleClickHandler}/>\n      <SideDrawer show={this.state.sideDrawerOpen}/>;\n     {backdrop}\n      \n      <main style={{marginTop: '64px'}}>\n        <p>This is the Page Content</p>\n        </main>\n      \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}